%dt.tabs__title.tab_button{ class: day_selected(day) }
  = Russian::strftime(day, "%e %B")
  %span
    = Russian::strftime(day, "- %A")
%dd.tabs__content{ class: day_selected(day)  }
  .programm__filter
    .programm__filter__checkboxs-title Выберите секцию:
    %ul.programm__filter__checkboxs
      - @workshops.each_with_index do |workshop, i|
        %li
          %input.checkbox_type-2.schedule__filter{ id: "section-#{i}-#{day.to_s}", type: "checkbox", name: "order_item", value: "Y", data: {section_id: workshop_color(workshop.title), lecture: "lecture__#{workshop_color(workshop.title)}"  } }
            %label{ class: "checkbox_type-2-#{workshop_color(workshop.title)}", for: "section-#{i}-#{day.to_s}" }
              = workshop.title
  .programm__schedule
    %table.page-1{ id: "april-#{day.day}" }
      %thead
        %tr
          %th
            %span.programm__prev.disable{ data: { page: "1" }}
          - @halls.each_with_index do |hall, index|
            %th{data: {hall: index.next}}
              .hall-circle
                = ('A'..'Z').to_a[index]
              %span.hall-title= hall.title
          %th
            %span.programm__next{ data: { page: "2" }}
      %tbody
        - now = configus.now_time
        - if now > start_time && now < finish_time
          %tr.current_time_line_tr{data: {time: now.to_i}}
            %td{colspan: @halls.count + 1}
              .show_passed{onclick: "showPassedClick(this)"}
                .show_text
                  Показать прошедшие
                .hide_text
                  Спрятать прошедшие
              %div.current_time_line
                %div.left_time.time
                  %span.hours=now.strftime('%k')
                  %span.minutes= now.strftime('%M')
        - (minutes_count(start_time)...minutes_count(finish_time)).each_slice(5).to_a.each do |i|
          - i_time = DateTime.new(day.year, day.month, day.day, i.first / 60, i.first % 60, 0, start_time.zone)
          - if not slots_in_time?(@slots, i_time)
            - if before_after_party?(i_time, @lectures_slots)
              %tr{ id: "#{i_time.hour}_#{i_time.minute}_tr", data: { time: i_time.to_i }  }
                %td.programm__time{ style: "border-left: 0px; border-top: 0px" }
                - (1..@halls.count).each_with_index do |item, index|
                  %td{data: {hall: index} }
            - else
              %tr{ id: "#{i_time.hour}_#{i_time.minute}_tr", data: { time: i_time.to_i }  }
                = render "timeline", i_time: i_time
                - (1..@halls.count).each_with_index do |item, index|
                  %td{data: {hall: index} }
          - elsif @first_hall.has_begin_event?(i_time)
            %tr.programm__schedule__mainaction{ id: "#{i_time.hour}_#{i_time.minute}_tr", data: { time: i_time.to_i }  }
              %td.programm__time
                = i_time.hour
                %span
                  = minute_to_timeline(i_time.minute)
              %td{ colspan: @halls.count + 1 }
                %h4
                  = link_to_if @first_hall.slot_at_the_time(i_time).event.url.present?, @first_hall.slot_at_the_time(i_time).event.title, @first_hall.slot_at_the_time(i_time).event.url
          - elsif @first_hall.has_event?(i_time)
            - next
          - elsif @first_hall.timeline_need_finish_event_correction?(i_time)
            %tr.programm__schedule__lectures{ id: "#{i_time.hour}_#{i_time.minute}_tr", data: { time: i_time.to_i }  }
              %td.programm__time{ style: "border-top: 0px" }
                = render "program_table_row",  i_time: i_time
          - else
            %tr.programm__schedule__lectures{ id: "#{i_time.hour}_#{i_time.minute}_tr", data: { time: i_time.to_i }  }
              = render "timeline", i_time: i_time
              = render "program_table_row", i_time: i_time
